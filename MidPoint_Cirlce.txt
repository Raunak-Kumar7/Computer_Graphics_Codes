#include <stdio.h>
#include <iostream>
#include <GL/glut.h>
using namespace std;

int pntX1, pntY1, r;

void plot(int x, int y)
{
	glBegin(GL_POINTS);
	glVertex2i(x + pntX1, y + pntY1 ); //To adjust if centre is not 0,0
	glEnd();
}


void myInit(void)
{
	glClearColor(0.0, 1.0, 1.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-100,100,-100,100);
}


void midPointCircleAlgo()
{
	int x = 0;
	int y = r;
	float decision = 3- 2*r;
	plot(x, y);

	while (y > x)
	{
		if (decision < 0)
		{
			decision += 2 * x + 3;
			x++;
		}
		else
		{
			decision += 2 * (x - y) + 5;
			y--;
			x++;
		}
		plot(x, y);
		plot(x, -y);
		plot(-x, y);
		plot(-x, -y);
		plot(y, x);
		plot(-y, x);
		plot(y, -x);
		plot(-y, -x);
	}

}

void myDisplay(void)
{
	glColor3f(0.0, 0.0, 0.0);
	glPointSize(1.0);
	midPointCircleAlgo();

	glFlush();
}

int main(int argc, char** argv)
{
	/*cout << "Enter the coordinates of the center:\n\n" << endl;

	cout << "X-coordinate   : "; cin >> pntX1;
	cout << "\nY-coordinate : "; cin >> pntY1;
	cout << "\nEnter radius : "; cin >> r;
	*/
	pntX1 = -5;
	pntY1 = -10;
	r = 30;

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(640, 480);
	glutInitWindowPosition(100, 150);
	glutCreateWindow("Line Drawing Alogrithms");
	glutDisplayFunc(myDisplay);
	myInit();
	glutMainLoop();

}
